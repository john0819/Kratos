syntax = "proto3";

package realworld.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "kratos-realworld/api/realworld/v1;v1";

// The greeting service definition.
service RealWorld {
  rpc Login(LoginRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/api/users/login",
      body: "*",      
    };
  }

  rpc Register(RegisterRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/api/users",
      body: "*",
    };
  }

  rpc GetCurrentUser(GetCurrentUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      get: "/api/user",
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      put: "/api/user",
      body: "*",
    };
  }
  
  rpc GetProfile(GetProfileRequest) returns (ProfileResponse) {
    option (google.api.http) = {
      get: "/api/profiles/{username}",
    };
  }

  rpc FollowUser(FollowUserRequest) returns (ProfileResponse) {
    option (google.api.http) = {
      post: "/api/profiles/{username}/follow",
      body: "*",
    };
  }

  rpc UnfollowUser(UnfollowUserRequest) returns (ProfileResponse) {
    option (google.api.http) = {
      delete: "/api/profiles/{username}/follow",
    };
  }

  rpc ListArticles(ListArticlesRequest) returns (MultipleArticleResponse) {
    option (google.api.http) = {
      get: "/api/articles",
    };
  }

  rpc FeedArticles(FeedArticlesRequest) returns (MultipleArticleResponse) {
    option (google.api.http) = {
      get: "/api/articles/feed",
    };
  }

  rpc GetArticle(GetArticleRequest) returns (SingleArticleResponse) {
    option (google.api.http) = {
      get: "/api/articles/{slug}",
    };
  }

  rpc CreateArticle(CreateArticleRequest) returns (SingleArticleResponse) {
    option (google.api.http) = {
      post: "/api/articles",
      body: "*",
    };
  }
  
  rpc UpdateArticle(UpdateArticleRequest) returns (SingleArticleResponse) {
    option (google.api.http) = {
      put: "/api/articles/{slug}",
      body: "*",
    };
  }

  rpc DeleteArticle(DeleteArticleRequest) returns (DeleteArticleResponse) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}",
    };
  }

  rpc AddComment(AddCommentRequest) returns (SingleCommentResponse) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/comments",
      body: "*",
    };
  }

  rpc GetComments(GetCommentsRequest) returns (MultipleCommentResponse) {
    option (google.api.http) = {
      get: "/api/articles/{slug}/comments",
    };
  }

  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/comments/{id}",
    };
  }

  rpc FavoriteArticle(FavoriteArticleRequest) returns (SingleArticleResponse) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/favorite",
      body: "*",
    };
  }

  rpc UnfavoriteArticle(UnfavoriteArticleRequest) returns (SingleArticleResponse) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/favorite",
    };
  }

  rpc GetTags(GetTagsRequest) returns (TagsListResponse) {
    option (google.api.http) = {
      get: "/api/tags",
    };
  }
}

message GetTagsRequest {}

message FavoriteArticleRequest {
  string slug = 1;
} 

message UnfavoriteArticleRequest {
  string slug = 1;
}

message DeleteCommentRequest {
  string slug = 1;
  uint32 id = 2;
}

message DeleteCommentResponse {
  string message = 1;
}

message GetCommentsRequest {
  string slug = 1;  
}

message AddCommentRequest {
  message Comment {
    string body = 1;
  }

  Comment comment = 1;
  string slug = 2;
}

message DeleteArticleRequest {
  string slug = 1;
}

message DeleteArticleResponse {
  string message = 1;
}

message UpdateArticleRequest {

    message Article {
        string title = 1;
        string description = 2;
        string body = 3;
        repeated string tag_list = 4;
    }

    Article article = 1;
    string slug = 2;
}

message CreateArticleRequest {

    message Article {
        string title = 1;
        string description = 2;
        string body = 3;
        repeated string tag_list = 4;
    }

    Article article = 1;
}

message FeedArticlesRequest {
  int64 limit = 1;
  int64 offset = 2;
}

message GetArticleRequest {
  string slug = 1;
}

message ListArticlesRequest {
  string tag = 1;
  string author = 2;
  string favorited = 3;
  int64 limit = 4;
  int64 offset = 5;
}

message UnfollowUserRequest {
  string username = 1;
}

message FollowUserRequest {
  string username = 1;
}

message GetProfileRequest {
  string username = 1;
}

message UpdateUserRequest {

    message User {
        string email = 1;
        string password = 2;
        string username = 3;
        string bio = 4;
        string image = 5;
    }

    User user = 1;
}

message GetCurrentUserRequest {}

message LoginRequest {
  message User {
    string email = 1;
    string password = 2;
  }
  User user = 1;
}

message RegisterRequest {
  message User {
    string username = 1;
    string email = 2;
    string password = 3;
  }
  User user = 1;
}


// 通用
message UserResponse {
  message User {
      string email = 1;
      string token = 2;
      string username = 3;
      string bio = 4;
      string image = 5;
  }
  User user = 1;
}

message ProfileResponse {
  message Profile {
      string username = 1;
      string bio = 2;
      string image = 3;
      bool following = 4;
  }
  Profile profile = 1;
}

message SingleArticleResponse {

  message Author {
      string username = 1;
      string bio = 2;
      string image = 3;
      bool following = 4;
  }

  message Article {
      string slug = 1;
      string title = 2;
      string description = 3;
      string body = 4;
      repeated string tag_list = 5;
      google.protobuf.Timestamp created_at = 6;
      google.protobuf.Timestamp updated_at = 7;
      bool favorited = 8;
      uint32 favorites_count = 9;
      Author author = 10;
  }

  Article article = 1;
}

message MultipleArticleResponse {

    message Author {
        string username = 1;
        string bio = 2;
        string image = 3;
        bool following = 4;
    }

    message Articles {
        string slug = 1;
        string title = 2;
        string description = 3;
        repeated string tag_list = 4;
        google.protobuf.Timestamp created_at = 5;
        google.protobuf.Timestamp updated_at = 6;
        bool favorited = 7;
        uint32 favorites_count = 8;
        Author author = 9;
    }

    repeated Articles articles = 1;
    uint32 articles_count = 2;
}

message SingleCommentResponse {
  Comment comment = 1;
}

message Comment {
  uint32 id = 1;
  google.protobuf.Timestamp createdAt = 2;
  google.protobuf.Timestamp updatedAt = 3;
  string body = 4;
  Profile author = 5;
}
message Profile {
  string username = 1;
  string bio = 2;
  string image = 3;
  bool following = 4;
}

message MultipleCommentResponse {
    repeated Comment comments = 1;
}

message TagsListResponse {
    repeated string tags = 1;
}

